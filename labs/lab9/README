# THIS LAB IS OPTIONAL
# If you decide to complete it, it's due by Sunday 11:59 of Week 10.
################################################################################
#  Pipeline Pattern
################################################################################

The pipeline pattern can help to run a workflow, with stages, in parallel. 
This can be benificial in online processing where data is being sent or recieved serially.


################################################################################
#  Problem Statement
################################################################################

OSNAP has intercepted a video signal of interest in the form of consecutive discreet images.
We would like to view the signal in realtime however several filters must be applied. 
The provided serial implementation cannot keep up with the frame rate.

Please modify using the pipeline pattern to increase the frame rate. 
The sample video frames are in /tmp/vframe/snapNNNNN.jpg on wopr in the lab.
There are about 500M of images so plan your exercise accordingly


TBB has built in constructions to express pipelines
Cilk and OpenMP would need the producer/comsumer pairs built 
(Cilk will be getting syntatic sugar for pipelining in an upcoming version).

Parallize your implementation in whichever technology you choose.  

This exercise uses the Open Computer Vision library (OpenCV) 
to read, manipulate and render graphics which are in place on wopr.

########################################################################
#  What to do
########################################################################

1. Check out the repository onto WOPR

git fetch
git checkout origin/master labs


2. Run the Makefile and look at the source code and output of the serial progra

3. Run make check_serial  (this requires an X-windows display so ssh in to wopr with -X)

4. Write a parallel versions of the program.

5. Update the Makefile entry for the parallel build target with compilation commands for source files.

6. Update the Makefile entry for the parallel check target with run comands for your implementation 

7. Commit the source files and updated Makefile to your repository.

8. Building in timing comparisons will be appreciated. 
